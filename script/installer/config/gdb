#!/bin/sh

set -eu

unset -f install_config_gdb_copy
unset -f install_config_gdb_symlink
unset -f install_config_gdb
unset -f install_config_gdb_driver

# -----------------------------------------------------------------------------
# Copy file
#
# @param {string} $1 - source
# @param {string} $2 - destination
#
install_config_gdb_copy() {
  if [ $# -ne 2 ]; then
    msg_param_error "install_config_gdb_copy" "$@"
    exit 1
  fi

  local src="$1"
  local dst="$2"

  msg_normal "Installing ${src##*/}"
  if ! fs_cp "$src" "$dst"; then
    exit 1
  fi
}


# -----------------------------------------------------------------------------
# Make symbolic link
#
# @param {string} $1 - target
# @param {string} $2 - link
#
install_config_gdb_symlink() {
  if [ $# -ne 2 ]; then
    msg_param_error "install_config_gdb_symlink" "$@"
    exit 1
  fi

  local target="$1"
  local link="$2"

  msg_normal "Installing ${target##*/}"
  if ! fs_ln_s "$target" "$link"; then
    exit 1
  fi
}

# -----------------------------------------------------------------------------
# Installer
#
# @param {string} $1 - project root path
#
install_config_gdb() {
  if [ $# -ne 1 ]; then
    msg_param_error "install_config_gdb" "$@"
    exit 1
  fi

  local root="$1"

  local src="${root}/config/gdb"
  local dst="${HOME}/.config/gdb"

  if ! fs_mkdir "$dst"; then
    exit 1
  fi

  install_config_gdb_symlink "${src}/gdbinit"   "${dst}/gdbinit"
  install_config_gdb_copy    "${src}/extension" "${dst}/extension"
}

# -----------------------------------------------------------------------------
# Driver
#
install_config_gdb_driver() {
  local root
  root="$(realpath "$(dirname "$(realpath "$0")")/../../../")"

  . "${root}/script/lib/fs"
  . "${root}/script/lib/list"
  . "${root}/script/lib/msg"

  install_config_gdb "$root"
}

if [ "${0##*/}" = "gdb" ]; then
  install_config_gdb_driver
fi
